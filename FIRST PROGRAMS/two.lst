;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 26/01/2024 02:02:29 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF76  	GOTO        236
_interrupt:
;two.c,40 :: 		void interrupt(){
;two.c,42 :: 		if (TMR0IF_bit){
0x0008	0x010E      	MOVLB       14
0x000A	0xABCA      	BTFSS       TMR0IF_bit, BitPos(TMR0IF_bit+0), 1
0x000C	0xD01D      	BRA         L_interrupt0
;two.c,43 :: 		TMR0H = 0xFF;
0x000E	0x0EFF      	MOVLW       255
0x0010	0x6ED4      	MOVWF       TMR0H 
;two.c,44 :: 		TMR0L = 0xF7;
0x0012	0x0EF7      	MOVLW       247
0x0014	0x6ED3      	MOVWF       TMR0L 
;two.c,45 :: 		if(ACT1){
0x0016	0xAA83      	BTFSS       LATA, 5 
0x0018	0xD00A      	BRA         L_interrupt1
;two.c,46 :: 		if(bool_interrupt){
0x001A	0xA222      	BTFSS       _flags, 1 
0x001C	0xD008      	BRA         L_interrupt2
;two.c,47 :: 		LPLACA = 0;
0x001E	0x9883      	BCF         LATA, 4 
;two.c,48 :: 		AR1 = AR1 + 1;
0x0020	0x0E01      	MOVLW       1
0x0022	0x2615      	ADDWF       _AR1, 1 
0x0024	0x0E00      	MOVLW       0
0x0026	0x2216      	ADDWFC      _AR1+1, 1 
0x0028	0x2217      	ADDWFC      _AR1+2, 1 
0x002A	0x2218      	ADDWFC      _AR1+3, 1 
;two.c,49 :: 		bool_interrupt = FALSE;
0x002C	0x9222      	BCF         _flags, 1 
;two.c,50 :: 		}
L_interrupt2:
;two.c,51 :: 		}
L_interrupt1:
;two.c,52 :: 		if(ACT2){
0x002E	0xA087      	BTFSS       LATE, 0 
0x0030	0xD00A      	BRA         L_interrupt3
;two.c,53 :: 		if(bool_interrupt){
0x0032	0xA222      	BTFSS       _flags, 1 
0x0034	0xD008      	BRA         L_interrupt4
;two.c,54 :: 		LPLACA = 0;
0x0036	0x9883      	BCF         LATA, 4 
;two.c,55 :: 		AR2 = AR2 + 1;
0x0038	0x0E01      	MOVLW       1
0x003A	0x2619      	ADDWF       _AR2, 1 
0x003C	0x0E00      	MOVLW       0
0x003E	0x221A      	ADDWFC      _AR2+1, 1 
0x0040	0x221B      	ADDWFC      _AR2+2, 1 
0x0042	0x221C      	ADDWFC      _AR2+3, 1 
;two.c,56 :: 		bool_interrupt = FALSE;
0x0044	0x9222      	BCF         _flags, 1 
;two.c,57 :: 		}
L_interrupt4:
;two.c,58 :: 		}
L_interrupt3:
;two.c,59 :: 		TMR0IF_bit = 0;
0x0046	0x9BCA      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0), 1
;two.c,60 :: 		}
L_interrupt0:
;two.c,68 :: 		}
L_end_interrupt:
L__interrupt27:
0x0048	0x0011      	RETFIE      1
; end of _interrupt
_InitInterrupt:
;two.c,175 :: 		void InitInterrupt(){
;two.c,177 :: 		PIE0 = 0x10; // Registro Peripheral Interrupt Enable (Bit 4 IOCIE)
0x004A	0x0E10      	MOVLW       16
0x004C	0x010E      	MOVLB       14
0x004E	0x6FC2      	MOVWF       PIE0, 1
;two.c,178 :: 		IOCCF = 0x00; // Seteo en 0 el registro del Interrupt on Change on PORTC Flag
0x0050	0x010F      	MOVLB       15
0x0052	0x6B1A      	CLRF        IOCCF, 1
;two.c,179 :: 		IOCCN = 0x00; // Seteo en 0 el registro del Interrupt on Change on PORTC Flag
0x0054	0x6B1B      	CLRF        IOCCN, 1
;two.c,180 :: 		IOCCP = 0x00; // Seteo en 0 el registro del Interrupt on Change on PORTC Flag
0x0056	0x6B1C      	CLRF        IOCCP, 1
;two.c,181 :: 		T0CON0 = 0x90;
0x0058	0x0E90      	MOVLW       144
0x005A	0x6ED5      	MOVWF       T0CON0 
;two.c,182 :: 		T0CON1 = 0x46;
0x005C	0x0E46      	MOVLW       70
0x005E	0x6ED6      	MOVWF       T0CON1 
;two.c,183 :: 		TMR0H = 0xFF;
0x0060	0x0EFF      	MOVLW       255
0x0062	0x6ED4      	MOVWF       TMR0H 
;two.c,184 :: 		TMR0L = 0xF7;
0x0064	0x0EF7      	MOVLW       247
0x0066	0x6ED3      	MOVWF       TMR0L 
;two.c,185 :: 		INTCON = 0xC0; // Registro INTCON (Bit 7 y 6; GIE y PIE)
0x0068	0x0EC0      	MOVLW       192
0x006A	0x6EF2      	MOVWF       INTCON 
;two.c,186 :: 		TMR0IE_bit = 1;
0x006C	0x010E      	MOVLB       14
0x006E	0x8BC2      	BSF         TMR0IE_bit, BitPos(TMR0IE_bit+0), 1
;two.c,188 :: 		}
L_end_InitInterrupt:
0x0070	0x0012      	RETURN      0
; end of _InitInterrupt
_watchdog:
;two.c,125 :: 		void watchdog(){
;two.c,127 :: 		while(1){
L_watchdog14:
;two.c,129 :: 		if(1 == LATCH)continue;
0x0072	0xA08F      	BTFSS       PORTC, 0 
0x0074	0xD001      	BRA         L_watchdog16
0x0076	0xD7FD      	BRA         L_watchdog14
L_watchdog16:
;two.c,131 :: 		if(0 == LATCH){
0x0078	0xA08F      	BTFSS       PORTC, 0 
;two.c,132 :: 		flag01 = 1; // Ponemos la bandera en 1
0x007A	0x8021      	BSF         _flag01, BitPos(_flag01+0) 
;two.c,133 :: 		}
L_watchdog17:
;two.c,135 :: 		}
L_watchdog15:
;two.c,136 :: 		}
L_end_watchdog:
0x007C	0x0012      	RETURN      0
; end of _watchdog
_MUX:
;two.c,142 :: 		void MUX(){
;two.c,144 :: 		if(AR2 > AR1){
0x007E	0x0E80      	MOVLW       128
0x0080	0x1818      	XORWF       _AR1+3, 0 
0x0082	0x6E00      	MOVWF       R0 
0x0084	0x0E80      	MOVLW       128
0x0086	0x181C      	XORWF       _AR2+3, 0 
0x0088	0x5C00      	SUBWF       R0, 0 
0x008A	0xE108      	BNZ         L__MUX32
0x008C	0x501B      	MOVF        _AR2+2, 0 
0x008E	0x5C17      	SUBWF       _AR1+2, 0 
0x0090	0xE105      	BNZ         L__MUX32
0x0092	0x501A      	MOVF        _AR2+1, 0 
0x0094	0x5C16      	SUBWF       _AR1+1, 0 
0x0096	0xE102      	BNZ         L__MUX32
0x0098	0x5019      	MOVF        _AR2, 0 
0x009A	0x5C15      	SUBWF       _AR1, 0 
L__MUX32:
0x009C	0xE202      	BC          L_MUX18
;two.c,145 :: 		multi = 0;
0x009E	0x6A23      	CLRF        _multi 
;two.c,146 :: 		}
0x00A0	0xD002      	BRA         L_MUX19
L_MUX18:
;two.c,148 :: 		multi = 1;
0x00A2	0x0E01      	MOVLW       1
0x00A4	0x6E23      	MOVWF       _multi 
;two.c,149 :: 		}
L_MUX19:
;two.c,151 :: 		}
L_end_MUX:
0x00A6	0x0012      	RETURN      0
; end of _MUX
___CC2DW:
;__Lib_System_xxK40.c,22 :: 		
;__Lib_System_xxK40.c,24 :: 		
0x00A8	0x8E81      	BSF         NVMCON1, 7, 0
;__Lib_System_xxK40.c,25 :: 		
_CC2DL_Loop1:
;__Lib_System_xxK40.c,26 :: 		
0x00AA	0x0009      	TBLRD*+
;__Lib_System_xxK40.c,27 :: 		
0x00AC	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System_xxK40.c,28 :: 		
0x00B0	0x0600      	DECF        R0, 1, 0
;__Lib_System_xxK40.c,29 :: 		
0x00B2	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,30 :: 		
0x00B4	0x0601      	DECF        R1, 1, 0
;__Lib_System_xxK40.c,31 :: 		
0x00B6	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,33 :: 		
L_end___CC2DW:
0x00B8	0x0012      	RETURN      0
; end of ___CC2DW
_InitMCU:
;two.c,194 :: 		void InitMCU(){
;two.c,196 :: 		ADCON1 = 0x0F; // Desactivamos los valores TTL para el PIC
0x00BA	0x0E0F      	MOVLW       15
0x00BC	0x010F      	MOVLB       15
0x00BE	0x6F59      	MOVWF       ADCON1, 1
;two.c,198 :: 		ANSELC = 0; // Puerto A en digital
0x00C0	0x6B21      	CLRF        ANSELC, 1
;two.c,199 :: 		ANSELE = 0; // Puerto E en digital
0x00C2	0x6B2E      	CLRF        ANSELE, 1
;two.c,200 :: 		ANSELA = 0; // Puerto A en digital
0x00C4	0x6B11      	CLRF        ANSELA, 1
;two.c,202 :: 		TRISC = 0x03; // C0 y C1 quedan como entradas, los demas en salidas
0x00C6	0x0E03      	MOVLW       3
0x00C8	0x6E8A      	MOVWF       TRISC 
;two.c,203 :: 		TRISE = 0x00; // Puerto E como salida
0x00CA	0x6A8C      	CLRF        TRISE 
;two.c,204 :: 		TRISA = 0x00; // Puerto A como salida
0x00CC	0x6A88      	CLRF        TRISA 
;two.c,206 :: 		PORTC = 0x01; // Dejamos C0 en linea alta
0x00CE	0x0E01      	MOVLW       1
0x00D0	0x6E8F      	MOVWF       PORTC 
;two.c,207 :: 		PORTA = 0x10; // Dejamos A4 en linea alta y los demas en linea baja
0x00D2	0x0E10      	MOVLW       16
0x00D4	0x6E8D      	MOVWF       PORTA 
;two.c,208 :: 		PORTE = 0x00; // Puerto E en linea baja
0x00D6	0x6A91      	CLRF        PORTE 
;two.c,210 :: 		LATC = 0x01; // Dejamos el registro de C0 en linea alta
0x00D8	0x0E01      	MOVLW       1
0x00DA	0x6E85      	MOVWF       LATC 
;two.c,211 :: 		LATE = 0x00; // Dejamos el registro del puerto E en linea baja
0x00DC	0x6A87      	CLRF        LATE 
;two.c,212 :: 		LATA = 0x10; // Dejamos el registro de A4 en linea alta
0x00DE	0x0E10      	MOVLW       16
0x00E0	0x6E83      	MOVWF       LATA 
;two.c,219 :: 		bool_once = TRUE; // Seteo del estado de la variable de ejecucion de una sola vez
0x00E2	0x8022      	BSF         _flags, 0 
;two.c,220 :: 		bool_interrupt = TRUE;
0x00E4	0x8222      	BSF         _flags, 1 
;two.c,221 :: 		flag01 = 0; // Seteo de la bandera 1 en 0
0x00E6	0x9021      	BCF         _flag01, BitPos(_flag01+0) 
;two.c,222 :: 		flag02 = 0;
0x00E8	0x9221      	BCF         _flag02, BitPos(_flag02+0) 
;two.c,224 :: 		}
L_end_InitMCU:
0x00EA	0x0012      	RETURN      0
; end of _InitMCU
_main:
0x00EC	0x6A15      	CLRF        _AR1 
0x00EE	0x6A16      	CLRF        22 
0x00F0	0x6A17      	CLRF        23 
0x00F2	0x6A18      	CLRF        24 
0x00F4	0x6A19      	CLRF        _AR2 
0x00F6	0x6A1A      	CLRF        26 
0x00F8	0x6A1B      	CLRF        27 
0x00FA	0x6A1C      	CLRF        28 
0x00FC	0x6A1D      	CLRF        _stop 
0x00FE	0x6A1E      	CLRF        30 
0x0100	0x6A1F      	CLRF        31 
0x0102	0x6A20      	CLRF        32 
;two.c,74 :: 		void main() {
;two.c,76 :: 		InitMCU(); // Iniciamos la configuracion del MCU
0x0104	0xDFDA      	RCALL       _InitMCU
;two.c,77 :: 		InitInterrupt(); // Iniciamos la configuracion del interrupt
0x0106	0xDFA1      	RCALL       _InitInterrupt
;two.c,79 :: 		AR1 = 0;
0x0108	0x6A15      	CLRF        _AR1 
0x010A	0x6A16      	CLRF        _AR1+1 
0x010C	0x6A17      	CLRF        _AR1+2 
0x010E	0x6A18      	CLRF        _AR1+3 
;two.c,80 :: 		AR2 = 0;
0x0110	0x6A19      	CLRF        _AR2 
0x0112	0x6A1A      	CLRF        _AR2+1 
0x0114	0x6A1B      	CLRF        _AR2+2 
0x0116	0x6A1C      	CLRF        _AR2+3 
;two.c,82 :: 		if(stop >= 80){
0x0118	0x0E80      	MOVLW       128
0x011A	0x1820      	XORWF       _stop+3, 0 
0x011C	0x6E00      	MOVWF       R0 
0x011E	0x0E80      	MOVLW       128
0x0120	0x5C00      	SUBWF       R0, 0 
0x0122	0xE108      	BNZ         L__main29
0x0124	0x0E00      	MOVLW       0
0x0126	0x5C1F      	SUBWF       _stop+2, 0 
0x0128	0xE105      	BNZ         L__main29
0x012A	0x0E00      	MOVLW       0
0x012C	0x5C1E      	SUBWF       _stop+1, 0 
0x012E	0xE102      	BNZ         L__main29
0x0130	0x0E50      	MOVLW       80
0x0132	0x5C1D      	SUBWF       _stop, 0 
L__main29:
0x0134	0xB0D8      	BTFSC       STATUS, 0 
;two.c,83 :: 		ACT2 = ~ACT2;
0x0136	0x7087      	BTG         LATE, 0 
;two.c,84 :: 		}
L_main5:
;two.c,87 :: 		while(1){
L_main6:
;two.c,88 :: 		watchdog(); // Iniciamos la rutina de polling para el estado de la bandera
0x0138	0xDF9C      	RCALL       _watchdog
;two.c,91 :: 		if(flag01 == 1){
0x013A	0xA021      	BTFSS       _flag01, BitPos(_flag01+0) 
0x013C	0xD00D      	BRA         L_main8
;two.c,92 :: 		MUX(); // Iniciamos la rutina del chequeo para el registro
0x013E	0xDF9F      	RCALL       _MUX
;two.c,95 :: 		switch(multi){
0x0140	0xD004      	BRA         L_main9
;two.c,96 :: 		case 0:
L_main11:
;two.c,97 :: 		ACT1 = ~ACT1;
0x0142	0x7A83      	BTG         LATA, 5 
;two.c,98 :: 		break;
0x0144	0xD008      	BRA         L_main10
;two.c,99 :: 		case 1:
L_main12:
;two.c,100 :: 		ACT2 = ~ACT2;
0x0146	0x7087      	BTG         LATE, 0 
;two.c,101 :: 		break;
0x0148	0xD006      	BRA         L_main10
;two.c,102 :: 		}
L_main9:
0x014A	0x5023      	MOVF        _multi, 0 
0x014C	0x0A00      	XORLW       0
0x014E	0xE0F9      	BZ          L_main11
0x0150	0x5023      	MOVF        _multi, 0 
0x0152	0x0A01      	XORLW       1
0x0154	0xE0F8      	BZ          L_main12
L_main10:
;two.c,109 :: 		}
0x0156	0xD004      	BRA         L_main13
L_main8:
;two.c,112 :: 		ACT1 = 0;
0x0158	0x9A83      	BCF         LATA, 5 
;two.c,113 :: 		ACT2 = 0;
0x015A	0x9087      	BCF         LATE, 0 
;two.c,114 :: 		ACT3 = 0;
0x015C	0x9287      	BCF         LATE, 1 
;two.c,115 :: 		ACT4 = 0;
0x015E	0x9487      	BCF         LATE, 2 
;two.c,116 :: 		}
L_main13:
;two.c,117 :: 		}
0x0160	0xD7EB      	BRA         L_main6
;two.c,119 :: 		}
L_end_main:
0x0162	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [66]    _interrupt
0x004A      [40]    _InitInterrupt
0x0072      [12]    _watchdog
0x007E      [42]    _MUX
0x00A8      [18]    ___CC2DW
0x00BA      [50]    _InitMCU
0x00EC     [120]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0001       [1]    blink_i_L1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [4]    _AR1
0x0019       [4]    _AR2
0x001D       [4]    _stop
0x0021       [0]    _flag01
0x0021       [0]    _flag02
0x0022       [1]    _flags
0x0023       [1]    _multi
0x0EC2       [0]    TMR0IE_bit
0x0EC2       [1]    PIE0
0x0ECA       [0]    TMR0IF_bit
0x0F11       [1]    ANSELA
0x0F1A       [1]    IOCCF
0x0F1B       [1]    IOCCN
0x0F1C       [1]    IOCCP
0x0F21       [1]    ANSELC
0x0F2E       [1]    ANSELE
0x0F59       [1]    ADCON1
0x0F81       [1]    NVMCON1
0x0F83       [1]    LATA
0x0F85       [1]    LATC
0x0F87       [1]    LATE
0x0F88       [1]    TRISA
0x0F8A       [1]    TRISC
0x0F8C       [1]    TRISE
0x0F8D       [1]    PORTA
0x0F8F       [1]    PORTC
0x0F91       [1]    PORTE
0x0FD3       [1]    TMR0L
0x0FD4       [1]    TMR0H
0x0FD5       [1]    T0CON0
0x0FD6       [1]    T0CON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
