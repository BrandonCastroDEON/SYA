;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 25/01/2024 05:41:00 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF44  	GOTO        136
_interrupt:
;test.c,12 :: 		void interrupt(){
0x0008	0xF015C000  	MOVFF       R0, 21
;test.c,15 :: 		if (PIR0.TMR0IF){
0x000C	0x010E      	MOVLB       14
0x000E	0xABCA      	BTFSS       PIR0, 5, 1
0x0010	0xD021      	BRA         L_interrupt0
;test.c,16 :: 		TMR0L = 0x3B;                              // Se carga la cuenta inicial en 65285 para 1ms.
0x0012	0x0E3B      	MOVLW       59
0x0014	0x6ED3      	MOVWF       TMR0L 
;test.c,17 :: 		TMR0H = 0xF6;                              // ''
0x0016	0x0EF6      	MOVLW       246
0x0018	0x6ED4      	MOVWF       TMR0H 
;test.c,18 :: 		cuenta++;
0x001A	0x0E01      	MOVLW       1
0x001C	0x2616      	ADDWF       _cuenta, 1 
0x001E	0x0E00      	MOVLW       0
0x0020	0x2217      	ADDWFC      _cuenta+1, 1 
0x0022	0x2218      	ADDWFC      _cuenta+2, 1 
0x0024	0x2219      	ADDWFC      _cuenta+3, 1 
;test.c,19 :: 		if(LATCH){
0x0026	0xA08F      	BTFSS       PORTC, 0 
0x0028	0xD014      	BRA         L_interrupt1
;test.c,20 :: 		if(cuenta >= 100){
0x002A	0x0E80      	MOVLW       128
0x002C	0x1819      	XORWF       _cuenta+3, 0 
0x002E	0x6E00      	MOVWF       R0 
0x0030	0x0E80      	MOVLW       128
0x0032	0x5C00      	SUBWF       R0, 0 
0x0034	0xE108      	BNZ         L__interrupt5
0x0036	0x0E00      	MOVLW       0
0x0038	0x5C18      	SUBWF       _cuenta+2, 0 
0x003A	0xE105      	BNZ         L__interrupt5
0x003C	0x0E00      	MOVLW       0
0x003E	0x5C17      	SUBWF       _cuenta+1, 0 
0x0040	0xE102      	BNZ         L__interrupt5
0x0042	0x0E64      	MOVLW       100
0x0044	0x5C16      	SUBWF       _cuenta, 0 
L__interrupt5:
0x0046	0xB0D8      	BTFSC       STATUS, 0 
;test.c,21 :: 		ACT1 = ~ACT1;
0x0048	0x7A83      	BTG         LATA, 5 
;test.c,22 :: 		}
L_interrupt2:
;test.c,23 :: 		cuenta = 0;
0x004A	0x6A16      	CLRF        _cuenta 
0x004C	0x6A17      	CLRF        _cuenta+1 
0x004E	0x6A18      	CLRF        _cuenta+2 
0x0050	0x6A19      	CLRF        _cuenta+3 
;test.c,24 :: 		}
L_interrupt1:
;test.c,25 :: 		PIR0.TMR0IF = 0;                           // Reinicio de la bandera del bit de interrupción.
0x0052	0x9BCA      	BCF         PIR0, 5, 1
;test.c,26 :: 		}
L_interrupt0:
;test.c,28 :: 		}
L_end_interrupt:
L__interrupt4:
0x0054	0xF000C015  	MOVFF       21, R0
0x0058	0x0011      	RETFIE      1
; end of _interrupt
_InitInterrupt:
;test.c,52 :: 		void InitInterrupt(){
;test.c,54 :: 		INTCON = 0xC0;
0x005A	0x0EC0      	MOVLW       192
0x005C	0x6EF2      	MOVWF       INTCON 
;test.c,56 :: 		T0CON0 = 0x90;                                        // Timer0 Enable - Timer de 16 bits
0x005E	0x0E90      	MOVLW       144
0x0060	0x6ED5      	MOVWF       T0CON0 
;test.c,57 :: 		T0CON1 = 0x46;                                        // Clock Source Fosc/4 - Prescaler 64
0x0062	0x0E46      	MOVLW       70
0x0064	0x6ED6      	MOVWF       T0CON1 
;test.c,58 :: 		PIE0 = 0x20;                                          // TMR0 Enable Interrupt
0x0066	0x0E20      	MOVLW       32
0x0068	0x010E      	MOVLB       14
0x006A	0x6FC2      	MOVWF       PIE0, 1
;test.c,59 :: 		TMR0L = 0x3B;                                         // La cuenta inicia en 65285 para 1ms, Prescaler 64
0x006C	0x0E3B      	MOVLW       59
0x006E	0x6ED3      	MOVWF       TMR0L 
;test.c,60 :: 		TMR0H = 0xF6;                                         // ''
0x0070	0x0EF6      	MOVLW       246
0x0072	0x6ED4      	MOVWF       TMR0H 
;test.c,62 :: 		}
L_end_InitInterrupt:
0x0074	0x0012      	RETURN      0
; end of _InitInterrupt
___CC2DW:
;__Lib_System_xxK40.c,22 :: 		
;__Lib_System_xxK40.c,24 :: 		
0x0076	0x8E81      	BSF         NVMCON1, 7, 0
;__Lib_System_xxK40.c,25 :: 		
_CC2DL_Loop1:
;__Lib_System_xxK40.c,26 :: 		
0x0078	0x0009      	TBLRD*+
;__Lib_System_xxK40.c,27 :: 		
0x007A	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System_xxK40.c,28 :: 		
0x007E	0x0600      	DECF        R0, 1, 0
;__Lib_System_xxK40.c,29 :: 		
0x0080	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,30 :: 		
0x0082	0x0601      	DECF        R1, 1, 0
;__Lib_System_xxK40.c,31 :: 		
0x0084	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,33 :: 		
L_end___CC2DW:
0x0086	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x0088	0x6A16      	CLRF        _cuenta 
0x008A	0x6A17      	CLRF        23 
0x008C	0x6A18      	CLRF        24 
0x008E	0x6A19      	CLRF        25 
;test.c,30 :: 		void main() {
;test.c,32 :: 		ANSELC = 0; // Puerto A en digital
0x0090	0x010F      	MOVLB       15
0x0092	0x6B21      	CLRF        ANSELC, 1
;test.c,33 :: 		ANSELE = 0; // Puerto E en digital
0x0094	0x6B2E      	CLRF        ANSELE, 1
;test.c,34 :: 		ANSELA = 0; // Puerto A en digital
0x0096	0x6B11      	CLRF        ANSELA, 1
;test.c,36 :: 		TRISC = 0x03; // C0 y C1 quedan como entradas, los demas en salidas
0x0098	0x0E03      	MOVLW       3
0x009A	0x6E8A      	MOVWF       TRISC 
;test.c,37 :: 		TRISE = 0x00; // Puerto E como salida
0x009C	0x6A8C      	CLRF        TRISE 
;test.c,38 :: 		TRISA = 0x00; // Puerto A como salida
0x009E	0x6A88      	CLRF        TRISA 
;test.c,40 :: 		PORTC = 0x01; // Dejamos C0 en linea alta
0x00A0	0x0E01      	MOVLW       1
0x00A2	0x6E8F      	MOVWF       PORTC 
;test.c,41 :: 		PORTA = 0x10; // Dejamos A4 en linea alta y los demas en linea baja
0x00A4	0x0E10      	MOVLW       16
0x00A6	0x6E8D      	MOVWF       PORTA 
;test.c,42 :: 		PORTE = 0x00; // Puerto E en linea baja
0x00A8	0x6A91      	CLRF        PORTE 
;test.c,44 :: 		LATC = 0x01; // Dejamos el registro de C0 en linea alta
0x00AA	0x0E01      	MOVLW       1
0x00AC	0x6E85      	MOVWF       LATC 
;test.c,45 :: 		LATE = 0x00; // Dejamos el registro del puerto E en linea baja
0x00AE	0x6A87      	CLRF        LATE 
;test.c,46 :: 		LATA = 0x10; // Dejamos el registro de A4 en linea alta
0x00B0	0x0E10      	MOVLW       16
0x00B2	0x6E83      	MOVWF       LATA 
;test.c,48 :: 		InitInterrupt();
0x00B4	0xDFD2      	RCALL       _InitInterrupt
;test.c,50 :: 		}
L_end_main:
0x00B6	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [82]    _interrupt
0x005A      [28]    _InitInterrupt
0x0076      [18]    ___CC2DW
0x0088      [48]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016       [4]    _cuenta
0x0EC2       [1]    PIE0
0x0ECA       [1]    PIR0
0x0F11       [1]    ANSELA
0x0F21       [1]    ANSELC
0x0F2E       [1]    ANSELE
0x0F81       [1]    NVMCON1
0x0F83       [1]    LATA
0x0F85       [1]    LATC
0x0F87       [1]    LATE
0x0F88       [1]    TRISA
0x0F8A       [1]    TRISC
0x0F8C       [1]    TRISE
0x0F8D       [1]    PORTA
0x0F8F       [1]    PORTC
0x0F91       [1]    PORTE
0x0FD3       [1]    TMR0L
0x0FD4       [1]    TMR0H
0x0FD5       [1]    T0CON0
0x0FD6       [1]    T0CON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
