;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 30/01/2024 09:22:17 a. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF4B  	GOTO        150
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_InitInterrupt:
;three_a.c,172 :: 		void InitInterrupt(){
;three_a.c,174 :: 		PIE0 = 0x10; // Registro Peripheral Interrupt Enable (Bit 4 IOCIE)
0x001C	0x0E10      	MOVLW       16
0x001E	0x010E      	MOVLB       14
0x0020	0x6FC2      	MOVWF       PIE0, 1
;three_a.c,175 :: 		IOCCF = 0x00; // Seteo en 0 el registro del Interrupt on Change on PORTC Flag
0x0022	0x010F      	MOVLB       15
0x0024	0x6B1A      	CLRF        IOCCF, 1
;three_a.c,176 :: 		IOCCN = 0x00; // Seteo en 0 el registro del Interrupt on Change on PORTC Flag
0x0026	0x6B1B      	CLRF        IOCCN, 1
;three_a.c,177 :: 		IOCCP = 0x00; // Seteo en 0 el registro del Interrupt on Change on PORTC Flag
0x0028	0x6B1C      	CLRF        IOCCP, 1
;three_a.c,182 :: 		INTCON = 0xC0; // Registro INTCON (Bit 7 y 6; GIE y PIE)
0x002A	0x0EC0      	MOVLW       192
0x002C	0x6EF2      	MOVWF       INTCON 
;three_a.c,185 :: 		}
L_end_InitInterrupt:
0x002E	0x0012      	RETURN      0
; end of _InitInterrupt
_watchdog:
;three_a.c,153 :: 		void watchdog(){
;three_a.c,155 :: 		while(1){
L_watchdog24:
;three_a.c,157 :: 		if(1 == LATCH)continue;
0x0030	0xA08F      	BTFSS       PORTC, 0 
0x0032	0xD001      	BRA         L_watchdog26
0x0034	0xD7FD      	BRA         L_watchdog24
L_watchdog26:
;three_a.c,159 :: 		if(0 == LATCH){
0x0036	0xB08F      	BTFSC       PORTC, 0 
0x0038	0xD00F      	BRA         L_watchdog27
;three_a.c,160 :: 		Delay_ms(50);
0x003A	0x0E02      	MOVLW       2
0x003C	0x6E0B      	MOVWF       R11, 0
0x003E	0x0E45      	MOVLW       69
0x0040	0x6E0C      	MOVWF       R12, 0
0x0042	0x0EA9      	MOVLW       169
0x0044	0x6E0D      	MOVWF       R13, 0
L_watchdog28:
0x0046	0x2E0D      	DECFSZ      R13, 1, 0
0x0048	0xD7FE      	BRA         L_watchdog28
0x004A	0x2E0C      	DECFSZ      R12, 1, 0
0x004C	0xD7FC      	BRA         L_watchdog28
0x004E	0x2E0B      	DECFSZ      R11, 1, 0
0x0050	0xD7FA      	BRA         L_watchdog28
0x0052	0x0000      	NOP
0x0054	0x0000      	NOP
;three_a.c,161 :: 		flag_switch = 1; // Ponemos la bandera en 1
0x0056	0x801A      	BSF         _flag_switch, BitPos(_flag_switch+0) 
;three_a.c,163 :: 		}
L_watchdog27:
;three_a.c,165 :: 		}
L_watchdog25:
;three_a.c,166 :: 		}
L_end_watchdog:
0x0058	0x0012      	RETURN      0
; end of _watchdog
_InitMCU:
;three_a.c,191 :: 		void InitMCU(){
;three_a.c,193 :: 		ADCON1 = 0x0F; // Desactivamos los valores TTL para el PIC
0x005A	0x0E0F      	MOVLW       15
0x005C	0x010F      	MOVLB       15
0x005E	0x6F59      	MOVWF       ADCON1, 1
;three_a.c,195 :: 		ANSELC = 0; // Puerto A en digital
0x0060	0x6B21      	CLRF        ANSELC, 1
;three_a.c,196 :: 		ANSELE = 0; // Puerto E en digital
0x0062	0x6B2E      	CLRF        ANSELE, 1
;three_a.c,197 :: 		ANSELA = 0; // Puerto A en digital
0x0064	0x6B11      	CLRF        ANSELA, 1
;three_a.c,199 :: 		TRISC = 0x03; // C0 y C1 quedan como entradas, los demas en salidas
0x0066	0x0E03      	MOVLW       3
0x0068	0x6E8A      	MOVWF       TRISC 
;three_a.c,200 :: 		TRISE = 0x00; // Puerto E como salida
0x006A	0x6A8C      	CLRF        TRISE 
;three_a.c,201 :: 		TRISA = 0x00; // Puerto A como salida
0x006C	0x6A88      	CLRF        TRISA 
;three_a.c,203 :: 		PORTC = 0x00; // Dejamos C0 en linea alta
0x006E	0x6A8F      	CLRF        PORTC 
;three_a.c,204 :: 		PORTA = 0x10; // Dejamos A4 en linea alta y los demas en linea baja
0x0070	0x0E10      	MOVLW       16
0x0072	0x6E8D      	MOVWF       PORTA 
;three_a.c,205 :: 		PORTE = 0x00; // Puerto E en linea baja
0x0074	0x6A91      	CLRF        PORTE 
;three_a.c,207 :: 		LATC = 0x00; // Dejamos el registro de C0 en linea alta
0x0076	0x6A85      	CLRF        LATC 
;three_a.c,208 :: 		LATE = 0x00; // Dejamos el registro del puerto E en linea baja
0x0078	0x6A87      	CLRF        LATE 
;three_a.c,209 :: 		LATA = 0x10; // Dejamos el registro de A4 en linea alta
0x007A	0x0E10      	MOVLW       16
0x007C	0x6E83      	MOVWF       LATA 
;three_a.c,216 :: 		bool_interrupt = TRUE;
0x007E	0x8219      	BSF         _flags, 1 
;three_a.c,217 :: 		flag_switch = 0; // Seteo de la bandera 1 en 0
0x0080	0x901A      	BCF         _flag_switch, BitPos(_flag_switch+0) 
;three_a.c,219 :: 		}
L_end_InitMCU:
0x0082	0x0012      	RETURN      0
; end of _InitMCU
___CC2DW:
;__Lib_System_xxK40.c,22 :: 		
;__Lib_System_xxK40.c,24 :: 		
0x0084	0x8E81      	BSF         NVMCON1, 7, 0
;__Lib_System_xxK40.c,25 :: 		
_CC2DL_Loop1:
;__Lib_System_xxK40.c,26 :: 		
0x0086	0x0009      	TBLRD*+
;__Lib_System_xxK40.c,27 :: 		
0x0088	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System_xxK40.c,28 :: 		
0x008C	0x0600      	DECF        R0, 1, 0
;__Lib_System_xxK40.c,29 :: 		
0x008E	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,30 :: 		
0x0090	0x0601      	DECF        R1, 1, 0
;__Lib_System_xxK40.c,31 :: 		
0x0092	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,33 :: 		
L_end___CC2DW:
0x0094	0x0012      	RETURN      0
; end of ___CC2DW
_main:
;three_a.c,45 :: 		void main() {
;three_a.c,47 :: 		InitMCU(); // Inicio MCU (seteo de pines y registros de bits)
0x0096	0xDFE1      	RCALL       _InitMCU
;three_a.c,48 :: 		InitInterrupt();
0x0098	0xDFC1      	RCALL       _InitInterrupt
;three_a.c,49 :: 		bool_once = TRUE; // Seteo del estado de la variable de ejecucion de una sola vez
0x009A	0x8019      	BSF         _flags, 0 
;three_a.c,51 :: 		while(1){
L_main0:
;three_a.c,52 :: 		watchdog(); // Inicio de la funcion observadora
0x009C	0xDFC9      	RCALL       _watchdog
;three_a.c,55 :: 		if((flag_switch == 1) && (LATCH == 0)){
0x009E	0xA01A      	BTFSS       _flag_switch, BitPos(_flag_switch+0) 
0x00A0	0xD04B      	BRA         L_main4
0x00A2	0xB08F      	BTFSC       PORTC, 0 
0x00A4	0xD049      	BRA         L_main4
L__main29:
;three_a.c,57 :: 		if(AR1P > AR2P){
0x00A6	0x0E80      	MOVLW       128
0x00A8	0x1826      	XORWF       _AR2P+3, 0 
0x00AA	0x6E00      	MOVWF       R0 
0x00AC	0x0E80      	MOVLW       128
0x00AE	0x1818      	XORWF       _AR1P+3, 0 
0x00B0	0x5C00      	SUBWF       R0, 0 
0x00B2	0xE108      	BNZ         L__main31
0x00B4	0x5017      	MOVF        _AR1P+2, 0 
0x00B6	0x5C25      	SUBWF       _AR2P+2, 0 
0x00B8	0xE105      	BNZ         L__main31
0x00BA	0x5016      	MOVF        _AR1P+1, 0 
0x00BC	0x5C24      	SUBWF       _AR2P+1, 0 
0x00BE	0xE102      	BNZ         L__main31
0x00C0	0x5015      	MOVF        _AR1P, 0 
0x00C2	0x5C23      	SUBWF       _AR2P, 0 
L__main31:
0x00C4	0xE20E      	BC          L_main5
;three_a.c,58 :: 		ACT2 = 1; // Si, entonces enciende actuador 2
0x00C6	0x8087      	BSF         LATE, 0 
;three_a.c,59 :: 		AR2 = AR2P + 1; // Se suma el registro historico mas 1 al registro actual
0x00C8	0x0E01      	MOVLW       1
0x00CA	0x2423      	ADDWF       _AR2P, 0 
0x00CC	0x6E1F      	MOVWF       _AR2 
0x00CE	0x0E00      	MOVLW       0
0x00D0	0x2024      	ADDWFC      _AR2P+1, 0 
0x00D2	0x6E20      	MOVWF       _AR2+1 
0x00D4	0x0E00      	MOVLW       0
0x00D6	0x2025      	ADDWFC      _AR2P+2, 0 
0x00D8	0x6E21      	MOVWF       _AR2+2 
0x00DA	0x0E00      	MOVLW       0
0x00DC	0x2026      	ADDWFC      _AR2P+3, 0 
0x00DE	0x6E22      	MOVWF       _AR2+3 
;three_a.c,60 :: 		}
0x00E0	0xD01D      	BRA         L_main6
L_main5:
;three_a.c,62 :: 		else if(AR1P < AR2P){
0x00E2	0x0E80      	MOVLW       128
0x00E4	0x1818      	XORWF       _AR1P+3, 0 
0x00E6	0x6E00      	MOVWF       R0 
0x00E8	0x0E80      	MOVLW       128
0x00EA	0x1826      	XORWF       _AR2P+3, 0 
0x00EC	0x5C00      	SUBWF       R0, 0 
0x00EE	0xE108      	BNZ         L__main32
0x00F0	0x5025      	MOVF        _AR2P+2, 0 
0x00F2	0x5C17      	SUBWF       _AR1P+2, 0 
0x00F4	0xE105      	BNZ         L__main32
0x00F6	0x5024      	MOVF        _AR2P+1, 0 
0x00F8	0x5C16      	SUBWF       _AR1P+1, 0 
0x00FA	0xE102      	BNZ         L__main32
0x00FC	0x5023      	MOVF        _AR2P, 0 
0x00FE	0x5C15      	SUBWF       _AR1P, 0 
L__main32:
0x0100	0xE20D      	BC          L_main7
;three_a.c,63 :: 		ACT1 = 1; // Si, entonces enciende actuador 1
0x0102	0x8A83      	BSF         LATA, 5 
;three_a.c,64 :: 		AR1 = AR1P + 1; // Se suma el registro historico mas 1 al registro actual
0x0104	0x0E01      	MOVLW       1
0x0106	0x2415      	ADDWF       _AR1P, 0 
0x0108	0x6E1B      	MOVWF       _AR1 
0x010A	0x0E00      	MOVLW       0
0x010C	0x2016      	ADDWFC      _AR1P+1, 0 
0x010E	0x6E1C      	MOVWF       _AR1+1 
0x0110	0x0E00      	MOVLW       0
0x0112	0x2017      	ADDWFC      _AR1P+2, 0 
0x0114	0x6E1D      	MOVWF       _AR1+2 
0x0116	0x0E00      	MOVLW       0
0x0118	0x2018      	ADDWFC      _AR1P+3, 0 
0x011A	0x6E1E      	MOVWF       _AR1+3 
;three_a.c,65 :: 		}
L_main7:
L_main6:
;three_a.c,67 :: 		if(AR1P == AR1){
0x011C	0x5018      	MOVF        _AR1P+3, 0 
0x011E	0x181E      	XORWF       _AR1+3, 0 
0x0120	0xE108      	BNZ         L__main33
0x0122	0x5017      	MOVF        _AR1P+2, 0 
0x0124	0x181D      	XORWF       _AR1+2, 0 
0x0126	0xE105      	BNZ         L__main33
0x0128	0x5016      	MOVF        _AR1P+1, 0 
0x012A	0x181C      	XORWF       _AR1+1, 0 
0x012C	0xE102      	BNZ         L__main33
0x012E	0x5015      	MOVF        _AR1P, 0 
0x0130	0x181B      	XORWF       _AR1, 0 
L__main33:
0x0132	0xB4D8      	BTFSC       STATUS, 2 
;three_a.c,68 :: 		LPLACA = ~LPLACA; // Cambia de estado al LED de la placa
0x0134	0x7883      	BTG         LATA, 4 
;three_a.c,69 :: 		}
L_main8:
;three_a.c,70 :: 		}
0x0136	0xD01A      	BRA         L_main9
L_main4:
;three_a.c,73 :: 		ACT1 = 0;   // Apagamos todos los actuadores
0x0138	0x9A83      	BCF         LATA, 5 
;three_a.c,74 :: 		ACT2 = 0;
0x013A	0x9087      	BCF         LATE, 0 
;three_a.c,75 :: 		AR1P = AR1; // Registramos el valor del registro actual en el registro historico
0x013C	0xF015C01B  	MOVFF       _AR1, _AR1P
0x0140	0xF016C01C  	MOVFF       _AR1+1, _AR1P+1
0x0144	0xF017C01D  	MOVFF       _AR1+2, _AR1P+2
0x0148	0xF018C01E  	MOVFF       _AR1+3, _AR1P+3
;three_a.c,76 :: 		AR2P = AR2;
0x014C	0xF023C01F  	MOVFF       _AR2, _AR2P
0x0150	0xF024C020  	MOVFF       _AR2+1, _AR2P+1
0x0154	0xF025C021  	MOVFF       _AR2+2, _AR2P+2
0x0158	0xF026C022  	MOVFF       _AR2+3, _AR2P+3
;three_a.c,77 :: 		AR1 = 0;    // Reiniciamos los registros actuales de los actuadores
0x015C	0x6A1B      	CLRF        _AR1 
0x015E	0x6A1C      	CLRF        _AR1+1 
0x0160	0x6A1D      	CLRF        _AR1+2 
0x0162	0x6A1E      	CLRF        _AR1+3 
;three_a.c,78 :: 		AR2 = 0;
0x0164	0x6A1F      	CLRF        _AR2 
0x0166	0x6A20      	CLRF        _AR2+1 
0x0168	0x6A21      	CLRF        _AR2+2 
0x016A	0x6A22      	CLRF        _AR2+3 
;three_a.c,79 :: 		}
L_main9:
;three_a.c,80 :: 		}
0x016C	0xD797      	BRA         L_main0
;three_a.c,82 :: 		}
L_end_main:
0x016E	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [20]    _InitInterrupt
0x0030      [42]    _watchdog
0x005A      [42]    _InitMCU
0x0084      [18]    ___CC2DW
0x0096     [218]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    blink_i_L1
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [4]    _AR1P
0x0019       [1]    _flags
0x001A       [0]    _flag_switch
0x001B       [4]    _AR1
0x001F       [4]    _AR2
0x0023       [4]    _AR2P
0x0EC2       [1]    PIE0
0x0F11       [1]    ANSELA
0x0F1A       [1]    IOCCF
0x0F1B       [1]    IOCCN
0x0F1C       [1]    IOCCP
0x0F21       [1]    ANSELC
0x0F2E       [1]    ANSELE
0x0F59       [1]    ADCON1
0x0F81       [1]    NVMCON1
0x0F83       [1]    LATA
0x0F85       [1]    LATC
0x0F87       [1]    LATE
0x0F88       [1]    TRISA
0x0F8A       [1]    TRISC
0x0F8C       [1]    TRISE
0x0F8D       [1]    PORTA
0x0F8F       [1]    PORTC
0x0F91       [1]    PORTE
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
