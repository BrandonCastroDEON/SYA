;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 22/01/2024 05:42:24 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF17  	GOTO        46
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
___CC2DW:
;__Lib_System_xxK40.c,22 :: 		
;__Lib_System_xxK40.c,24 :: 		
0x001C	0x8E81      	BSF         NVMCON1, 7, 0
;__Lib_System_xxK40.c,25 :: 		
_CC2DL_Loop1:
;__Lib_System_xxK40.c,26 :: 		
0x001E	0x0009      	TBLRD*+
;__Lib_System_xxK40.c,27 :: 		
0x0020	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System_xxK40.c,28 :: 		
0x0024	0x0600      	DECF        R0, 1, 0
;__Lib_System_xxK40.c,29 :: 		
0x0026	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,30 :: 		
0x0028	0x0601      	DECF        R1, 1, 0
;__Lib_System_xxK40.c,31 :: 		
0x002A	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,33 :: 		
L_end___CC2DW:
0x002C	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x002E	0x6A15      	CLRF        _AR2 
0x0030	0x6A16      	CLRF        22 
0x0032	0x0E01      	MOVLW       1
0x0034	0x6E17      	MOVWF       _AR1 
0x0036	0x6A18      	CLRF        24 
;S_A.c,6 :: 		void main() {
;S_A.c,8 :: 		ADCON1 = 0x0F; // Desactivamos los niveles TTL del PIC
0x0038	0x0E0F      	MOVLW       15
0x003A	0x010F      	MOVLB       15
0x003C	0x6F59      	MOVWF       ADCON1, 1
;S_A.c,10 :: 		ANSELC = 0; // Ponemos los pines del puerto C en modo digital
0x003E	0x6B21      	CLRF        ANSELC, 1
;S_A.c,11 :: 		ANSELE = 0; // Ponemos los pines del puerto E en modo digital
0x0040	0x6B2E      	CLRF        ANSELE, 1
;S_A.c,12 :: 		ANSELA = 0; // Ponemos los pines del puerto A en modo digital
0x0042	0x6B11      	CLRF        ANSELA, 1
;S_A.c,14 :: 		TRISC = 0x03; // Indicamos que C0 y C1 en el puerto C quedan en modo entrada, los demas en modo salida
0x0044	0x0E03      	MOVLW       3
0x0046	0x6E8A      	MOVWF       TRISC 
;S_A.c,15 :: 		TRISE = 0x00; // Indicamos que el puerto E queda en modo salida
0x0048	0x6A8C      	CLRF        TRISE 
;S_A.c,16 :: 		TRISA = 0x00; // Indicamos que el puerto A queda en modo salida
0x004A	0x6A88      	CLRF        TRISA 
;S_A.c,18 :: 		PORTC = 0x00; // Ponemos al puerto C en ceros
0x004C	0x6A8F      	CLRF        PORTC 
;S_A.c,19 :: 		PORTE = 0x00; // Ponemos al puerto E en ceros
0x004E	0x6A91      	CLRF        PORTE 
;S_A.c,20 :: 		PORTA = 0x00; // Ponemos al puerto A en ceros
0x0050	0x6A8D      	CLRF        PORTA 
;S_A.c,22 :: 		LATC = 0x00; // Establecemos en cero el registro del puerto C
0x0052	0x6A85      	CLRF        LATC 
;S_A.c,23 :: 		LATE = 0x00; // Establecemos en cero el registro del puerto E
0x0054	0x6A87      	CLRF        LATE 
;S_A.c,24 :: 		LATA = 0x00; // Establecemos en cero el registro del puerto A
0x0056	0x6A83      	CLRF        LATA 
;S_A.c,26 :: 		AR1 = 0; // Reiniciamos los registros del actuador 1 en cero
0x0058	0x6A17      	CLRF        _AR1 
0x005A	0x6A18      	CLRF        _AR1+1 
;S_A.c,27 :: 		AR2 = 0; // Reiniciamos los registros del actuador 2 en cero
0x005C	0x6A15      	CLRF        _AR2 
0x005E	0x6A16      	CLRF        _AR2+1 
;S_A.c,29 :: 		do{
L_main0:
;S_A.c,32 :: 		if(RC0_bit == 0){
0x0060	0xB08F      	BTFSC       RC0_bit, BitPos(RC0_bit+0) 
0x0062	0xD002      	BRA         L_main3
;S_A.c,33 :: 		Flag01 = 1; // Ponemos en 1 la bandera si el sensor 1 fue activado
0x0064	0x8019      	BSF         _Flag01, BitPos(_Flag01+0) 
;S_A.c,35 :: 		}
0x0066	0xD002      	BRA         L_main4
L_main3:
;S_A.c,37 :: 		else if(RC0_bit == 1){
0x0068	0xB08F      	BTFSC       RC0_bit, BitPos(RC0_bit+0) 
;S_A.c,38 :: 		Flag01 = 0; // Ponemos en 0 la bandera si el sensor 1 fue desactivado
0x006A	0x9019      	BCF         _Flag01, BitPos(_Flag01+0) 
;S_A.c,40 :: 		}
L_main5:
L_main4:
;S_A.c,43 :: 		if(RC1_bit == 0){
0x006C	0xB28F      	BTFSC       RC1_bit, BitPos(RC1_bit+0) 
0x006E	0xD002      	BRA         L_main6
;S_A.c,44 :: 		Flag02 = 1; // Ponemos en 1 la bandera si el sensor 2 fue activado
0x0070	0x8219      	BSF         _Flag02, BitPos(_Flag02+0) 
;S_A.c,46 :: 		}
0x0072	0xD002      	BRA         L_main7
L_main6:
;S_A.c,48 :: 		else if(RC1_bit == 1){
0x0074	0xB28F      	BTFSC       RC1_bit, BitPos(RC1_bit+0) 
;S_A.c,49 :: 		Flag02 = 0; // Ponemos en 0 la bandera si el sensor 2 fue desactivado
0x0076	0x9219      	BCF         _Flag02, BitPos(_Flag02+0) 
;S_A.c,51 :: 		}
L_main8:
L_main7:
;S_A.c,57 :: 		Delay_ms(100); // Delay de 100 ms para que el cambio en la bandera sea hecho
0x0078	0x0E03      	MOVLW       3
0x007A	0x6E0B      	MOVWF       R11, 0
0x007C	0x0E8A      	MOVLW       138
0x007E	0x6E0C      	MOVWF       R12, 0
0x0080	0x0E55      	MOVLW       85
0x0082	0x6E0D      	MOVWF       R13, 0
L_main9:
0x0084	0x2E0D      	DECFSZ      R13, 1, 0
0x0086	0xD7FE      	BRA         L_main9
0x0088	0x2E0C      	DECFSZ      R12, 1, 0
0x008A	0xD7FC      	BRA         L_main9
0x008C	0x2E0B      	DECFSZ      R11, 1, 0
0x008E	0xD7FA      	BRA         L_main9
0x0090	0x0000      	NOP
0x0092	0x0000      	NOP
;S_A.c,60 :: 		if(Flag01 = 1 && RC0_bit == 0){
0x0094	0xB08F      	BTFSC       RC0_bit, BitPos(RC0_bit+0) 
0x0096	0xD003      	BRA         L_main11
0x0098	0x0E01      	MOVLW       1
0x009A	0x6E00      	MOVWF       R0 
0x009C	0xD001      	BRA         L_main10
L_main11:
0x009E	0x6A00      	CLRF        R0 
L_main10:
0x00A0	0xB000      	BTFSC       R0, 0 
0x00A2	0xD002      	BRA         L__main27
0x00A4	0x9019      	BCF         _Flag01, BitPos(_Flag01+0) 
0x00A6	0xD001      	BRA         L__main28
L__main27:
0x00A8	0x8019      	BSF         _Flag01, BitPos(_Flag01+0) 
L__main28:
0x00AA	0xA019      	BTFSS       _Flag01, BitPos(_Flag01+0) 
0x00AC	0xD055      	BRA         L_main12
;S_A.c,63 :: 		if(AR1 > AR2){
0x00AE	0x5018      	MOVF        _AR1+1, 0 
0x00B0	0x5C16      	SUBWF       _AR2+1, 0 
0x00B2	0xE102      	BNZ         L__main29
0x00B4	0x5017      	MOVF        _AR1, 0 
0x00B6	0x5C15      	SUBWF       _AR2, 0 
L__main29:
0x00B8	0xE214      	BC          L_main13
;S_A.c,66 :: 		LATE = 0x02;
0x00BA	0x0E02      	MOVLW       2
0x00BC	0x6E87      	MOVWF       LATE 
;S_A.c,67 :: 		AR2 = AR2 + 1; // Incrementamos en 1 el contador del actuador 2
0x00BE	0x4A15      	INFSNZ      _AR2, 1 
0x00C0	0x2A16      	INCF        _AR2+1, 1 
;S_A.c,69 :: 		Flag01 = 0;
0x00C2	0x9019      	BCF         _Flag01, BitPos(_Flag01+0) 
;S_A.c,70 :: 		Delay_ms(100);
0x00C4	0x0E03      	MOVLW       3
0x00C6	0x6E0B      	MOVWF       R11, 0
0x00C8	0x0E8A      	MOVLW       138
0x00CA	0x6E0C      	MOVWF       R12, 0
0x00CC	0x0E55      	MOVLW       85
0x00CE	0x6E0D      	MOVWF       R13, 0
L_main14:
0x00D0	0x2E0D      	DECFSZ      R13, 1, 0
0x00D2	0xD7FE      	BRA         L_main14
0x00D4	0x2E0C      	DECFSZ      R12, 1, 0
0x00D6	0xD7FC      	BRA         L_main14
0x00D8	0x2E0B      	DECFSZ      R11, 1, 0
0x00DA	0xD7FA      	BRA         L_main14
0x00DC	0x0000      	NOP
0x00DE	0x0000      	NOP
;S_A.c,72 :: 		}
0x00E0	0xD014      	BRA         L_main15
L_main13:
;S_A.c,77 :: 		LATE = 0x01;
0x00E2	0x0E01      	MOVLW       1
0x00E4	0x6E87      	MOVWF       LATE 
;S_A.c,78 :: 		AR1 = AR1 + 1; // Incrementamos en 1 el contador del actuador 1
0x00E6	0x4A17      	INFSNZ      _AR1, 1 
0x00E8	0x2A18      	INCF        _AR1+1, 1 
;S_A.c,79 :: 		RA4_bit = 1; // LED de Debug
0x00EA	0x888D      	BSF         RA4_bit, BitPos(RA4_bit+0) 
;S_A.c,80 :: 		Flag01 = 0;
0x00EC	0x9019      	BCF         _Flag01, BitPos(_Flag01+0) 
;S_A.c,81 :: 		Delay_ms(100);
0x00EE	0x0E03      	MOVLW       3
0x00F0	0x6E0B      	MOVWF       R11, 0
0x00F2	0x0E8A      	MOVLW       138
0x00F4	0x6E0C      	MOVWF       R12, 0
0x00F6	0x0E55      	MOVLW       85
0x00F8	0x6E0D      	MOVWF       R13, 0
L_main16:
0x00FA	0x2E0D      	DECFSZ      R13, 1, 0
0x00FC	0xD7FE      	BRA         L_main16
0x00FE	0x2E0C      	DECFSZ      R12, 1, 0
0x0100	0xD7FC      	BRA         L_main16
0x0102	0x2E0B      	DECFSZ      R11, 1, 0
0x0104	0xD7FA      	BRA         L_main16
0x0106	0x0000      	NOP
0x0108	0x0000      	NOP
;S_A.c,83 :: 		}
L_main15:
;S_A.c,86 :: 		if(Flag02 = 1 && RC1_bit == 0){
0x010A	0xB28F      	BTFSC       RC1_bit, BitPos(RC1_bit+0) 
0x010C	0xD003      	BRA         L_main18
0x010E	0x0E01      	MOVLW       1
0x0110	0x6E00      	MOVWF       R0 
0x0112	0xD001      	BRA         L_main17
L_main18:
0x0114	0x6A00      	CLRF        R0 
L_main17:
0x0116	0xB000      	BTFSC       R0, 0 
0x0118	0xD002      	BRA         L__main30
0x011A	0x9219      	BCF         _Flag02, BitPos(_Flag02+0) 
0x011C	0xD001      	BRA         L__main31
L__main30:
0x011E	0x8219      	BSF         _Flag02, BitPos(_Flag02+0) 
L__main31:
0x0120	0xA219      	BTFSS       _Flag02, BitPos(_Flag02+0) 
0x0122	0xD007      	BRA         L_main19
;S_A.c,89 :: 		LATE = 0x03;
0x0124	0x0E03      	MOVLW       3
0x0126	0x6E87      	MOVWF       LATE 
;S_A.c,91 :: 		AR1 = AR1 + 1; // Incrementamos en 1 el contador del actuador 1
0x0128	0x4A17      	INFSNZ      _AR1, 1 
0x012A	0x2A18      	INCF        _AR1+1, 1 
;S_A.c,92 :: 		AR2 = AR2 + 1; // Incrementamos en 1 el contador del actuador 2
0x012C	0x4A15      	INFSNZ      _AR2, 1 
0x012E	0x2A16      	INCF        _AR2+1, 1 
;S_A.c,94 :: 		}
0x0130	0xD012      	BRA         L_main20
L_main19:
;S_A.c,96 :: 		else if(Flag02 = 0 && RC1_bit == 1){
0x0132	0x9219      	BCF         _Flag02, BitPos(_Flag02+0) 
0x0134	0xA219      	BTFSS       _Flag02, BitPos(_Flag02+0) 
0x0136	0xD00F      	BRA         L_main21
;S_A.c,98 :: 		if(AR1 > AR2){
0x0138	0x5018      	MOVF        _AR1+1, 0 
0x013A	0x5C16      	SUBWF       _AR2+1, 0 
0x013C	0xE102      	BNZ         L__main32
0x013E	0x5017      	MOVF        _AR1, 0 
0x0140	0x5C15      	SUBWF       _AR2, 0 
L__main32:
0x0142	0xE205      	BC          L_main22
;S_A.c,100 :: 		LATE = 0x02;
0x0144	0x0E02      	MOVLW       2
0x0146	0x6E87      	MOVWF       LATE 
;S_A.c,102 :: 		AR2 = AR2 + 1; // Se le suma 1 al contador del registro del actuador 2
0x0148	0x4A15      	INFSNZ      _AR2, 1 
0x014A	0x2A16      	INCF        _AR2+1, 1 
;S_A.c,104 :: 		}
0x014C	0xD004      	BRA         L_main23
L_main22:
;S_A.c,108 :: 		LATE = 0x01;
0x014E	0x0E01      	MOVLW       1
0x0150	0x6E87      	MOVWF       LATE 
;S_A.c,110 :: 		AR1 = AR1 + 1; // Se le suma 1 al contador del registro del actuador 1
0x0152	0x4A17      	INFSNZ      _AR1, 1 
0x0154	0x2A18      	INCF        _AR1+1, 1 
;S_A.c,112 :: 		}
L_main23:
;S_A.c,114 :: 		}
L_main21:
L_main20:
;S_A.c,116 :: 		}
0x0156	0xD005      	BRA         L_main24
L_main12:
;S_A.c,118 :: 		else if (Flag01 = 0 && RC0_bit == 1){
0x0158	0x9019      	BCF         _Flag01, BitPos(_Flag01+0) 
0x015A	0xA019      	BTFSS       _Flag01, BitPos(_Flag01+0) 
0x015C	0xD002      	BRA         L_main25
;S_A.c,120 :: 		LATE =  0x00;
0x015E	0x6A87      	CLRF        LATE 
;S_A.c,121 :: 		Flag01 = 0;
0x0160	0x9019      	BCF         _Flag01, BitPos(_Flag01+0) 
;S_A.c,124 :: 		}
L_main25:
L_main24:
;S_A.c,126 :: 		} while(1);
0x0162	0xD77E      	BRA         L_main0
;S_A.c,128 :: 		}
L_end_main:
0x0164	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [18]    ___CC2DW
0x002E     [312]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    _AR2
0x0017       [2]    _AR1
0x0019       [0]    _Flag02
0x0019       [0]    _Flag01
0x0F11       [1]    ANSELA
0x0F21       [1]    ANSELC
0x0F2E       [1]    ANSELE
0x0F59       [1]    ADCON1
0x0F81       [1]    NVMCON1
0x0F83       [1]    LATA
0x0F85       [1]    LATC
0x0F87       [1]    LATE
0x0F88       [1]    TRISA
0x0F8A       [1]    TRISC
0x0F8C       [1]    TRISE
0x0F8D       [0]    RA4_bit
0x0F8D       [1]    PORTA
0x0F8F       [1]    PORTC
0x0F8F       [0]    RC1_bit
0x0F8F       [0]    RC0_bit
0x0F91       [1]    PORTE
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
